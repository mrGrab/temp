function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//  strict
import * as React from 'react';
import { areEqualDates, getDateField, dateValue, fieldKeys, getInitialState, updateField } from './util';

class DateInputController extends React.PureComponent {
  _updateState(updater) {
    let updated = false;
    this.setState(state => {
      const nextState = updater(state);

      if (nextState === state) {
        return null;
      }

      updated = true;
      nextState.value = dateValue(nextState);
      return nextState;
    }, () => {
      updated && this.props.onChange && this.props.onChange(this.state.value);
    });
  }

  setFields(fields) {
    this._updateState(state => {
      const updaters = [];

      for (let i = 0; i < fieldKeys.length; i++) {
        const key = fieldKeys[i];
        const value = fields[key];

        if (value !== undefined) {
          if (typeof value === 'number' && (value | 0) === value) {
            updaters.push(updateField(i, value));
          } else if (typeof value === 'string' && /^[0-9]+$/.test(value)) {
            updaters.push(updateField(i, parseInt(value, 10)));
          } else {
            throw new TypeError(`Expected int ${key}. Received ${value}.`);
          }
        } else if (updaters.length) {
          updaters.push(updateField(i, state[fieldKeys[i]]));
        }
      }

      return updaters.reduce((state, updater) => updater(state), state);
    });
  }

  constructor(props) {
    super(props);
    const result = getInitialState(this);

    _extends(this, result.actions);

    this.state = result.state;
  }

  render() {
    const {
      children
    } = this.props;
    return children(this.state);
  }

}

DateInputController.defaultProps = {
  utc: false
};

DateInputController.getDerivedStateFromProps = (props, state) => {
  const {
    value = new Date(0),
    min,
    max,
    utc
  } = props;
  const newValue = !areEqualDates(state.props.value, value);
  const newMin = !areEqualDates(state.props.min, min);
  const newMax = !areEqualDates(state.props.max, max);
  const newUTC = state.props.utc !== utc; // Check if any of the props that can affect state have changed.

  if (!newValue && !newMin && !newMax && !newUTC) {
    return null;
  }

  let nextState = _extends({}, state, {
    props: {
      value,
      min,
      max,
      utc
    }
  });

  const updaters = fieldKeys.map((_, i) => updateField(i, getDateField[i](newValue ? value : state.value, utc))); // Calculate a new state from the incoming props.

  nextState = updaters.reduce((state, updater) => updater(state), nextState);
  const nextValue = dateValue(nextState);

  if (!areEqualDates(nextValue, state.value)) {
    nextState.value = nextValue;
  } // Return new state to trigger an update.


  return nextState;
};

export default DateInputController;
//# sourceMappingURL=DateInputController.js.map