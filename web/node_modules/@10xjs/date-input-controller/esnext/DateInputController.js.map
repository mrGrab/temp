{"version":3,"sources":["../src/DateInputController.js"],"names":["React","areEqualDates","getDateField","dateValue","fieldKeys","getInitialState","updateField","DateInputController","PureComponent","_updateState","updater","updated","setState","state","nextState","value","props","onChange","setFields","fields","updaters","i","length","key","undefined","push","test","parseInt","TypeError","reduce","constructor","result","actions","render","children","defaultProps","utc","getDerivedStateFromProps","Date","min","max","newValue","newMin","newMax","newUTC","map","_","nextValue"],"mappings":"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","sourcesContent":["// @flow strict\n\nimport * as React from 'react';\n\nimport type {Props, State} from './types';\n\nimport {\n  areEqualDates,\n  getDateField,\n  dateValue,\n  fieldKeys,\n  getInitialState,\n  updateField,\n} from './util';\n\nclass DateInputController extends React.PureComponent<Props, State> {\n  static defaultProps: typeof DateInputController.defaultProps;\n  static getDerivedStateFromProps: typeof DateInputController.getDerivedStateFromProps;\n\n  setYear: (value: number) => void;\n  setMonth: (value: number) => void;\n  setDay: (value: number) => void;\n  setHour: (value: number) => void;\n  setMinute: (value: number) => void;\n  setSecond: (value: number) => void;\n\n  _updateState(updater: (State) => State) {\n    let updated = false;\n\n    this.setState(\n      (state) => {\n        const nextState = updater(state);\n\n        if (nextState === state) {\n          return null;\n        }\n\n        updated = true;\n\n        nextState.value = dateValue(nextState);\n\n        return nextState;\n      },\n      () => {\n        updated && this.props.onChange && this.props.onChange(this.state.value);\n      },\n    );\n  }\n\n  setFields(fields: {\n    year?: number | string,\n    month?: number | string,\n    day?: number | string,\n    hour?: number | string,\n    minute?: number | string,\n    second?: number | string,\n  }) {\n    this._updateState((state) => {\n      const updaters = [];\n\n      for (let i = 0; i < fieldKeys.length; i++) {\n        const key = fieldKeys[i];\n        const value = fields[key];\n\n        if (value !== undefined) {\n          if (typeof value === 'number' && (value | 0) === value) {\n            updaters.push(updateField(i, value));\n          } else if (typeof value === 'string' && /^[0-9]+$/.test(value)) {\n            updaters.push(updateField(i, parseInt(value, 10)));\n          } else {\n            throw new TypeError(`Expected int ${key}. Received ${value}.`);\n          }\n        } else if (updaters.length) {\n          updaters.push(updateField(i, state[fieldKeys[i]]));\n        }\n      }\n\n      return updaters.reduce((state, updater) => updater(state), state);\n    });\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const result = getInitialState(this);\n    Object.assign(this, result.actions);\n    this.state = result.state;\n  }\n\n  render() {\n    const {children} = this.props;\n    return children(this.state);\n  }\n}\n\nDateInputController.defaultProps = {\n  utc: false,\n};\n\nDateInputController.getDerivedStateFromProps = (props: Props, state: State) => {\n  const {value = new Date(0), min, max, utc} = props;\n\n  const newValue = !areEqualDates(state.props.value, value);\n  const newMin = !areEqualDates(state.props.min, min);\n  const newMax = !areEqualDates(state.props.max, max);\n  const newUTC = state.props.utc !== utc;\n\n  // Check if any of the props that can affect state have changed.\n  if (!newValue && !newMin && !newMax && !newUTC) {\n    return null;\n  }\n\n  let nextState = Object.assign({}, state, {props: {value, min, max, utc}});\n\n  const updaters = fieldKeys.map((_, i) =>\n    updateField(i, getDateField[i](newValue ? value : state.value, utc)),\n  );\n\n  // Calculate a new state from the incoming props.\n  nextState = updaters.reduce((state, updater) => updater(state), nextState);\n\n  const nextValue = dateValue(nextState);\n\n  if (!areEqualDates(nextValue, state.value)) {\n    nextState.value = nextValue;\n  }\n\n  // Return new state to trigger an update.\n  return nextState;\n};\n\nexport default DateInputController;\n"],"file":"DateInputController.js"}