'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

//  strict
var daysInMonth = function daysInMonth(year, month) {
  // Create a date object at the last day of the selected month by using
  // referencing the 0th date of the next month.
  var date = new Date(year, month + 1, 0);
  return date.getDate();
}; // Check it two values represent equal dates at second precision.
// This comparison ROUNDS DOWN TO THE PREVIOUS SECOND.

var areEqualDates = function areEqualDates(a, b) {
  return a === b || a instanceof Date && b instanceof Date && (a.getTime() / 1000 | 0) === (b.getTime() / 1000 | 0);
};
var getDateField = [function (date, utc) {
  return utc ? date.getUTCFullYear() : date.getFullYear();
}, function (date, utc) {
  return utc ? date.getUTCMonth() : date.getMonth();
}, function (date, utc) {
  return utc ? date.getUTCDate() : date.getDate();
}, function (date, utc) {
  return utc ? date.getUTCHours() : date.getHours();
}, function (date, utc) {
  return utc ? date.getUTCMinutes() : date.getMinutes();
}, function (date, utc) {
  return utc ? date.getUTCSeconds() : date.getSeconds();
}];
var fieldKeys = ['year', 'month', 'day', 'hour', 'minute', 'second'];
var dateValue = function dateValue(state) {
  var args = fieldKeys.map(function (_, i) {
    return state[fieldKeys[i]];
  });

  if (state.props.utc) {
    return new Date(Date.UTC.apply(null, args));
  } // $ExpectError Flow doesn't like us touching Date.bind


  return new (Date.bind.apply(Date, [null].concat(args)))();
}; // Min Max Calc

var atMin = function atMin(state, index) {
  if (index < 0) {
    return true;
  }

  var min = state.props.min;
  return min && (index === 0 ? true : atMin(state, index - 1)) && getDateField[index](min, state.props.utc) >= state[fieldKeys[index]];
};

var atMax = function atMax(state, index) {
  if (index < 0) {
    return true;
  }

  var max = state.props.max;
  return max && (index === 0 ? true : atMax(state, index - 1)) && getDateField[index](max, state.props.utc) <= state[fieldKeys[index]];
};

var defaultMin = [null, 0, 1, 0, 0, 0];
var defaultMax = [null, 11, null, 23, 59, 59];

var resolveDefaultMax = function resolveDefaultMax(state, index) {
  return index === 2 ? daysInMonth(state[fieldKeys[0]], state[fieldKeys[1]]) : defaultMax[index];
};

var getMin = function getMin(state, index) {
  var min = state.props.min; // If min date is defined and the next-largest field is at its min value...

  return min && atMin(state, index - 1) ? // return the value of the min date at the current field...
  getDateField[index](min, state.props.utc) : // or return a default min value for the field.
  defaultMin[index];
};
var getMax = function getMax(state, index) {
  var max = state.props.max; // If max date is defined and the next-largest field is at its max value...

  return max && atMax(state, index - 1) ? // return the value of the max date at the current field...
  getDateField[index](max, state.props.utc) : // or return a default max value for the field.
  resolveDefaultMax(state, index);
};
var updateField = function updateField(index, value) {
  return function (state) {
    var key = fieldKeys[index];
    var minKey = "".concat(key, "Min");
    var maxKey = "".concat(key, "Max");
    var nextState = state;
    var min = getMin(state, index);
    var max = getMax(state, index);
    var nextValue = value;

    if (min !== null && nextValue < min) {
      nextValue = min;
    } else if (max !== null && nextValue > max) {
      nextValue = max;
    }

    if (nextValue !== state[key] || min !== state[minKey] || max !== state[maxKey]) {
      var update = {};
      update[key] = nextValue;
      update["".concat(key, "Min")] = min;
      update["".concat(key, "Max")] = max;
      nextState = _extends({}, state, update);
    }

    return nextState;
  };
};
var getInitialState = function getInitialState(target) {
  var updaters = [];
  var _target$props = target.props,
      _target$props$value = _target$props.value,
      value = _target$props$value === void 0 ? new Date(0) : _target$props$value,
      min = _target$props.min,
      max = _target$props.max,
      utc = _target$props.utc;
  var actions = {};
  var state = {
    value: value,
    props: {
      value: value,
      min: min,
      max: max,
      utc: utc
    }
  };
  fieldKeys.forEach(function (field, i) {
    updaters.push(updateField(i, getDateField[i](state.value, state.props.utc)));

    var setter = function setter(value) {
      var fields = {};
      fields[field] = value;
      target.setFields(fields);
    };

    actions["set".concat(field.charAt(0).toUpperCase()).concat(field.slice(1))] = setter;
  });

  _extends(state, actions);

  state = updaters.reduce(function (state, updater) {
    return updater(state);
  }, state);
  state.value = dateValue(state);
  return {
    state: state,
    actions: actions
  };
};

var DateInputController =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(DateInputController, _React$PureComponent);

  _createClass(DateInputController, [{
    key: "_updateState",
    value: function _updateState(updater) {
      var _this2 = this;

      var updated = false;
      this.setState(function (state) {
        var nextState = updater(state);

        if (nextState === state) {
          return null;
        }

        updated = true;
        nextState.value = dateValue(nextState);
        return nextState;
      }, function () {
        updated && _this2.props.onChange && _this2.props.onChange(_this2.state.value);
      });
    }
  }, {
    key: "setFields",
    value: function setFields(fields) {
      this._updateState(function (state) {
        var updaters = [];

        for (var i = 0; i < fieldKeys.length; i++) {
          var key = fieldKeys[i];
          var _value = fields[key];

          if (_value !== undefined) {
            if (typeof _value === 'number' && (_value | 0) === _value) {
              updaters.push(updateField(i, _value));
            } else if (typeof _value === 'string' && /^[0-9]+$/.test(_value)) {
              updaters.push(updateField(i, parseInt(_value, 10)));
            } else {
              throw new TypeError("Expected int ".concat(key, ". Received ").concat(_value, "."));
            }
          } else if (updaters.length) {
            updaters.push(updateField(i, state[fieldKeys[i]]));
          }
        }

        return updaters.reduce(function (state, updater) {
          return updater(state);
        }, state);
      });
    }
  }]);

  function DateInputController(props) {
    var _this;

    _classCallCheck(this, DateInputController);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateInputController).call(this, props));
    var result = getInitialState(_assertThisInitialized(_assertThisInitialized(_this)));

    _extends(_assertThisInitialized(_assertThisInitialized(_this)), result.actions);

    _this.state = result.state;
    return _this;
  }

  _createClass(DateInputController, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children(this.state);
    }
  }]);

  return DateInputController;
}(React.PureComponent);

DateInputController.defaultProps = {
  utc: false
};

DateInputController.getDerivedStateFromProps = function (props, state) {
  var _props$value = props.value,
      value = _props$value === void 0 ? new Date(0) : _props$value,
      min = props.min,
      max = props.max,
      utc = props.utc;
  var newValue = !areEqualDates(state.props.value, value);
  var newMin = !areEqualDates(state.props.min, min);
  var newMax = !areEqualDates(state.props.max, max);
  var newUTC = state.props.utc !== utc; // Check if any of the props that can affect state have changed.

  if (!newValue && !newMin && !newMax && !newUTC) {
    return null;
  }

  var nextState = _extends({}, state, {
    props: {
      value: value,
      min: min,
      max: max,
      utc: utc
    }
  });

  var updaters = fieldKeys.map(function (_, i) {
    return updateField(i, getDateField[i](newValue ? value : state.value, utc));
  }); // Calculate a new state from the incoming props.

  nextState = updaters.reduce(function (state, updater) {
    return updater(state);
  }, nextState);
  var nextValue = dateValue(nextState);

  if (!areEqualDates(nextValue, state.value)) {
    nextState.value = nextValue;
  } // Return new state to trigger an update.


  return nextState;
};

//  strict

exports.default = DateInputController;
//# sourceMappingURL=index.js.map
