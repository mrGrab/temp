{"version":3,"sources":["../src/FieldArray.js"],"names":["React","parsePath","formatPath","insert","remove","hasValue","Consumer","Field","renderWrapper","FieldArrayWrapper","PureComponent","addField","index","fieldValue","value","values","path","setValue","props","parsedPath","Array","isArray","removeField","render","format","parse","checkbox","initialValue","initialValues","pendingValue","pendingValues","error","errors","warning","warnings","submitting","submitFailed","submitSucceeded","submit","children","renderField","getFieldKey","formattedPath","Error","fields","map","parsedFieldPath","concat","bind","hasErrors","hasWarnings","rawValues","length","defaultProps","submitError","FieldArray","context","stateValue"],"mappings":"AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,SAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+CC,QAA/C,QAA8D,QAA9D;AACA,SAAQC,QAAR,QAAuB,WAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,iBAAN,SAAgCT,MAAMU,aAAtC,CAA4E;AAG1EC,WAASC,KAAT,EAAwBC,UAAxB,EAA2C;AACzC,UAAM;AAACC,aAAOC,MAAR;AAAgBC,UAAhB;AAAsBC;AAAtB,QAAkC,KAAKC,KAA7C;AAEA,UAAMC,aAAalB,UAAUe,IAAV,CAAnB;;AAEA,QAAII,MAAMC,OAAN,CAAcN,MAAd,CAAJ,EAA2B;AACzBE,eAASE,UAAT,EAAqBhB,OAAOY,MAAP,EAAeH,KAAf,EAAsBC,UAAtB,CAArB;AACD;AACF;;AAEDS,cAAYV,KAAZ,EAA2B;AACzB,UAAM;AAACE,aAAOC,MAAR;AAAgBC,UAAhB;AAAsBC;AAAtB,QAAkC,KAAKC,KAA7C;AAEA,UAAMC,aAAalB,UAAUe,IAAV,CAAnB;;AAEA,QAAII,MAAMC,OAAN,CAAcN,MAAd,CAAJ,EAA2B;AACzBE,eAASE,UAAT,EAAqBf,OAAOW,MAAP,EAAeH,KAAf,CAArB;AACD;AACF;;AAEDW,WAAS;AACP,UAAM;AACJ;AACAP,UAFI;AAGJQ,YAHI;AAIJC,WAJI;AAKJC,cALI;AAOJ;AACAC,oBAAcC,aARV;AASJd,aAAOC,MATH;AAUJc,oBAAcC,aAVV;AAWJC,aAAOC,MAXH;AAYJC,eAASC,QAZL;AAaJC,gBAbI;AAcJC,kBAdI;AAeJC,qBAfI;AAiBJ;AACAC,YAlBI;AAoBJ;AACAC,cArBI;AAsBJC,iBAtBI;AAuBJC;AAvBI,QAwBF,KAAKvB,KAxBT;AA0BA,UAAMC,aAAalB,UAAUe,IAAV,CAAnB;AACA,UAAM0B,gBAAgBxC,WAAWc,IAAX,CAAtB;;AAEA,QAAI,CAACI,MAAMC,OAAN,CAAcN,MAAd,CAAL,EAA4B;AAC1B,YAAM,IAAI4B,KAAJ,CAAW,2BAA0BD,aAAc,EAAnD,CAAN;AACD;;AAED,QAAI,CAACtB,MAAMC,OAAN,CAAcS,aAAd,CAAL,EAAmC;AACjC,YAAM,IAAIa,KAAJ,CAAW,kCAAiCD,aAAc,EAA1D,CAAN;AACD;;AAED,QAAI,CAACtB,MAAMC,OAAN,CAAca,QAAd,CAAL,EAA8B;AAC5B,YAAM,IAAIS,KAAJ,CAAW,8BAA6BD,aAAc,EAAtD,CAAN;AACD;;AAED,QAAI,CAACtB,MAAMC,OAAN,CAAcW,MAAd,CAAL,EAA4B;AAC1B,YAAM,IAAIW,KAAJ,CAAW,2BAA0BD,aAAc,EAAnD,CAAN;AACD;;AAED,UAAME,SAAS7B,OAAO8B,GAAP,CAAW,CAAC/B,KAAD,EAAQF,KAAR,KAAkB;AAC1C,YAAMkC,kBAAkB3B,WAAW4B,MAAX,CAAkB,CAACnC,KAAD,CAAlB,CAAxB;AAEA,aACE,oBAAC,KAAD;AACE,eAAOA,KADT;AAEE,aAAK6B,YAAY3B,KAAZ,EAAmBF,KAAnB,CAFP;AAGE,cAAMkC,eAHR;AAIE,gBAAQtB,MAJV;AAKE,eAAOC,KALT;AAME,kBAAUC,QANZ;AAOE,kBAAU,KAAKf,QAAL,CAAcqC,IAAd,CAAmB,IAAnB,CAPZ;AAQE,qBAAa,KAAK1B,WAAL,CAAiB0B,IAAjB,CAAsB,IAAtB;AARf,SAUGR,WAVH,CADF;AAcD,KAjBc,CAAf,CA9CO,CAiEP;AACA;AACA;;AACA,UAAMS,YAAY5C,SAAS2B,MAAT,CAAlB;AACA,UAAMkB,cAAc7C,SAAS6B,QAAT,CAApB;AAEA,WAAOK,SAAS;AACdK,YADc;AAGd;AACA5B,YAAM0B,aAJQ;AAKdO,eALc;AAMdjB,YANc;AAOdkB,iBAPc;AAQdhB,cARc;AASdC,gBATc;AAUdC,kBAVc;AAWdC,qBAXc;AAYdT,mBAZc;AAaduB,iBAAWpC,MAbG;AAcde,mBAdc;AAgBd;AACAQ,YAjBc;;AAmBd;AACA3B,eAASG,KAAT,EAAgB;AACd,aAAKH,QAAL,CAAciC,OAAOQ,MAArB,EAA6BtC,KAA7B;AACD;;AAtBa,KAAT,CAAP;AAwBD;;AAtHyE;;AAyH5EL,kBAAkB4C,YAAlB,GAAiC;AAC/B1B,gBAAc,EADiB;AAE/Bb,SAAO,EAFwB;AAG/Be,gBAAc,EAHiB;AAI/BE,SAAO,EAJwB;AAK/BE,WAAS,EALsB;AAM/BqB,eAAa;AANkB,CAAjC;;AASA,MAAMC,UAAN,SAAyBvD,MAAMU,aAA/B,CAA8D;AAG5Da,WAAS;AACP,UAAM;AACJP,UADI;AAEJQ,YAFI;AAGJC,WAHI;AAIJC,cAJI;AAKJc,iBALI;AAMJD,cANI;AAOJE;AAPI,QAQF,KAAKvB,KART;AAUA,WACE,oBAAC,QAAD,QACIsC,OAAD,IACCA,YAAY,IAAZ,IACAhD,cAAcC,iBAAd,EAAiC+C,OAAjC,EAA0C;AACxCxC,UADwC;AAExCQ,YAFwC;AAGxCC,WAHwC;AAIxCC,cAJwC;AAKxCc,iBALwC;AAMxCD,cANwC;AAOxCE;AAPwC,KAA1C,CAHJ,CADF;AAgBD;;AA9B2D;;AAiC9Dc,WAAWF,YAAX,GAA0B;AACxBd,YAAU,CAAC;AAACK;AAAD,GAAD,KAAqCA,MADvB;AAExBH,eAAa,CAACgB,UAAD,EAAoB7C,KAApB,KAAuC,GAAEA,KAAM;AAFpC,CAA1B;AAKA,eAAe2C,UAAf","sourcesContent":["// @flow strict\n\nimport * as React from 'react';\n\nimport type {\n  FieldArrayProps,\n  FieldArrayWrapperProps,\n  FieldArrayRenderProps,\n} from './types';\nimport {parsePath, formatPath, insert, remove, hasValue} from './util';\nimport {Consumer} from './context';\nimport Field from './Field';\nimport renderWrapper from './renderWrapper';\n\nclass FieldArrayWrapper extends React.PureComponent<FieldArrayWrapperProps> {\n  static defaultProps: typeof FieldArrayWrapper.defaultProps;\n\n  addField(index: number, fieldValue: mixed) {\n    const {value: values, path, setValue} = this.props;\n\n    const parsedPath = parsePath(path);\n\n    if (Array.isArray(values)) {\n      setValue(parsedPath, insert(values, index, fieldValue));\n    }\n  }\n\n  removeField(index: number) {\n    const {value: values, path, setValue} = this.props;\n\n    const parsedPath = parsePath(path);\n\n    if (Array.isArray(values)) {\n      setValue(parsedPath, remove(values, index));\n    }\n  }\n\n  render() {\n    const {\n      // Field Config\n      path,\n      format,\n      parse,\n      checkbox,\n\n      // Field state\n      initialValue: initialValues,\n      value: values,\n      pendingValue: pendingValues,\n      error: errors,\n      warning: warnings,\n      submitting,\n      submitFailed,\n      submitSucceeded,\n\n      // Context Actions\n      submit,\n\n      // Render Callbacks\n      children,\n      renderField,\n      getFieldKey,\n    } = this.props;\n\n    const parsedPath = parsePath(path);\n    const formattedPath = formatPath(path);\n\n    if (!Array.isArray(values)) {\n      throw new Error(`expected array value at ${formattedPath}`);\n    }\n\n    if (!Array.isArray(pendingValues)) {\n      throw new Error(`expected array pendingValue at ${formattedPath}`);\n    }\n\n    if (!Array.isArray(warnings)) {\n      throw new Error(`expected array warnings at ${formattedPath}`);\n    }\n\n    if (!Array.isArray(errors)) {\n      throw new Error(`expected array error at ${formattedPath}`);\n    }\n\n    const fields = values.map((value, index) => {\n      const parsedFieldPath = parsedPath.concat([index]);\n\n      return (\n        <Field\n          index={index}\n          key={getFieldKey(value, index)}\n          path={parsedFieldPath}\n          format={format}\n          parse={parse}\n          checkbox={checkbox}\n          addField={this.addField.bind(this)}\n          removeField={this.removeField.bind(this)}\n        >\n          {renderField}\n        </Field>\n      );\n    });\n\n    // TODO: Calculate dirty/detached state with shallow array equality,\n    // potentially with deep equality. Maybe provide a callback to allow the\n    // consumer to provide a compare func?\n    const hasErrors = hasValue(errors);\n    const hasWarnings = hasValue(warnings);\n\n    return children({\n      fields,\n\n      // \"Meta\" Props\n      path: formattedPath,\n      hasErrors,\n      errors,\n      hasWarnings,\n      warnings,\n      submitting,\n      submitFailed,\n      submitSucceeded,\n      initialValues,\n      rawValues: values,\n      pendingValues,\n\n      // Context Actions\n      submit,\n\n      // FieldArray Actions\n      addField(value) {\n        this.addField(fields.length, value);\n      },\n    });\n  }\n}\n\nFieldArrayWrapper.defaultProps = {\n  initialValue: [],\n  value: [],\n  pendingValue: [],\n  error: [],\n  warning: [],\n  submitError: [],\n};\n\nclass FieldArray extends React.PureComponent<FieldArrayProps> {\n  static defaultProps: typeof FieldArray.defaultProps;\n\n  render() {\n    const {\n      path,\n      format,\n      parse,\n      checkbox,\n      renderField,\n      children,\n      getFieldKey,\n    } = this.props;\n\n    return (\n      <Consumer>\n        {(context) =>\n          context !== null &&\n          renderWrapper(FieldArrayWrapper, context, {\n            path,\n            format,\n            parse,\n            checkbox,\n            renderField,\n            children,\n            getFieldKey,\n          })\n        }\n      </Consumer>\n    );\n  }\n}\n\nFieldArray.defaultProps = {\n  children: ({fields}: FieldArrayRenderProps) => fields,\n  getFieldKey: (stateValue: mixed, index: number) => `${index}`,\n};\n\nexport default FieldArray;\n"],"file":"FieldArray.js"}