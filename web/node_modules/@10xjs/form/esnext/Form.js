function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//  strict
import * as React from 'react';
import { Provider } from './context';
import DefaultStateProvider from './DefaultStateProvider';

function defaultStateProviderProp(config, render) {
  return React.createElement(DefaultStateProvider, config, render);
}

class FormWrapper extends React.PureComponent {
  render() {
    return this.props.children(_extends({}, this.props.actions, {
      submitting: this.props.submitting,
      submitFailed: this.props.submitFailed,
      submitSucceeded: this.props.submitSucceeded,
      hasErrors: this.props.hasErrors,
      hasSubmitErrors: this.props.hasSubmitErrors,
      hasWarnings: this.props.hasWarnings
    }));
  }

}

class Form extends React.PureComponent {
  render() {
    return this.props.stateProvider(this.props, context => {
      if (this._lastSetActions !== context.actions) {
        _extends(this, context.actions);

        this._lastSetActions = context.actions;
      }

      return React.createElement(Provider, {
        value: context
      }, React.createElement(FormWrapper, {
        actions: context.actions,
        submitting: context.submitting,
        submitFailed: context.submitFailed,
        submitSucceeded: context.submitSucceeded,
        hasErrors: context.errorState !== null,
        hasSubmitErrors: context.submitErrorState !== null,
        hasWarnings: context.warningState !== null
      }, this.props.children));
    });
  }

}

Form.defaultProps = {
  stateProvider: defaultStateProviderProp
};
export default Form;
//# sourceMappingURL=Form.js.map