function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//  strict
import * as React from 'react';
import { get, parsePath, formatPath } from './util';

const renderWrapper = (Wrapper, context, props) => {
  const parsedPath = parsePath(props.path);
  const formattedPath = formatPath(props.path);
  const {
    initialValueState,
    valueState,
    pendingValueState,
    warningState,
    errorState,
    submitErrorState,
    focusedPath,
    touchedMap,
    visitedMap,
    submitting,
    submitFailed,
    submitSucceeded,
    actions
  } = context;
  const warning = warningState !== null ? get(warningState, parsedPath) : undefined;
  let error = submitErrorState !== null ? get(submitErrorState, parsedPath) : undefined;

  if ((error === undefined || error === null) && errorState !== null) {
    error = get(errorState, parsedPath);
  }

  return React.createElement(Wrapper, _extends({}, props, {
    initialValue: get(initialValueState, parsedPath),
    value: get(valueState, parsedPath),
    pendingValue: get(pendingValueState, parsedPath),
    warning: warning,
    error: error,
    focused: focusedPath === formattedPath,
    touched: !!touchedMap[formattedPath],
    visited: !!visitedMap[formattedPath],
    submitting: submitting,
    submitFailed: submitFailed,
    submitSucceeded: submitSucceeded
  }, actions));
};

export default renderWrapper;
//# sourceMappingURL=renderWrapper.js.map