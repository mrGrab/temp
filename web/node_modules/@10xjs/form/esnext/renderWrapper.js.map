{"version":3,"sources":["../src/renderWrapper.js"],"names":["React","get","parsePath","formatPath","renderWrapper","Wrapper","context","props","parsedPath","path","formattedPath","initialValueState","valueState","pendingValueState","warningState","errorState","submitErrorState","focusedPath","touchedMap","visitedMap","submitting","submitFailed","submitSucceeded","actions","warning","undefined","error"],"mappings":";;AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAAQC,GAAR,EAAaC,SAAb,EAAwBC,UAAxB,QAAyC,QAAzC;;AAEA,MAAMC,gBAAgB,CACpBC,OADoB,EAEpBC,OAFoB,EAGpBC,KAHoB,KAIjB;AACH,QAAMC,aAAaN,UAAUK,MAAME,IAAhB,CAAnB;AACA,QAAMC,gBAAgBP,WAAWI,MAAME,IAAjB,CAAtB;AAEA,QAAM;AACJE,qBADI;AAEJC,cAFI;AAGJC,qBAHI;AAIJC,gBAJI;AAKJC,cALI;AAMJC,oBANI;AAOJC,eAPI;AAQJC,cARI;AASJC,cATI;AAUJC,cAVI;AAWJC,gBAXI;AAYJC,mBAZI;AAaJC;AAbI,MAcFjB,OAdJ;AAgBA,QAAMkB,UACJV,iBAAiB,IAAjB,GAAwBb,IAAIa,YAAJ,EAAkBN,UAAlB,CAAxB,GAAwDiB,SAD1D;AAGA,MAAIC,QACFV,qBAAqB,IAArB,GAA4Bf,IAAIe,gBAAJ,EAAsBR,UAAtB,CAA5B,GAAgEiB,SADlE;;AAGA,MAAI,CAACC,UAAUD,SAAV,IAAuBC,UAAU,IAAlC,KAA2CX,eAAe,IAA9D,EAAoE;AAClEW,YAAQzB,IAAIc,UAAJ,EAAgBP,UAAhB,CAAR;AACD;;AAED,SACE,oBAAC,OAAD,eACMD,KADN;AAEE,kBAAcN,IAAIU,iBAAJ,EAAuBH,UAAvB,CAFhB;AAGE,WAAOP,IAAIW,UAAJ,EAAgBJ,UAAhB,CAHT;AAIE,kBAAcP,IAAIY,iBAAJ,EAAuBL,UAAvB,CAJhB;AAKE,aAASgB,OALX;AAME,WAAOE,KANT;AAOE,aAAST,gBAAgBP,aAP3B;AAQE,aAAS,CAAC,CAACQ,WAAWR,aAAX,CARb;AASE,aAAS,CAAC,CAACS,WAAWT,aAAX,CATb;AAUE,gBAAYU,UAVd;AAWE,kBAAcC,YAXhB;AAYE,qBAAiBC;AAZnB,KAaMC,OAbN,EADF;AAiBD,CAnDD;;AAqDA,eAAenB,aAAf","sourcesContent":["// @flow strict\n\nimport * as React from 'react';\n\nimport type {Path, FormActions, Context, FieldStateProps} from './types';\nimport {get, parsePath, formatPath} from './util';\n\nconst renderWrapper = <P: {path: Path}>(\n  Wrapper: React.ComponentType<P & FieldStateProps & FormActions>,\n  context: Context,\n  props: P,\n) => {\n  const parsedPath = parsePath(props.path);\n  const formattedPath = formatPath(props.path);\n\n  const {\n    initialValueState,\n    valueState,\n    pendingValueState,\n    warningState,\n    errorState,\n    submitErrorState,\n    focusedPath,\n    touchedMap,\n    visitedMap,\n    submitting,\n    submitFailed,\n    submitSucceeded,\n    actions,\n  } = context;\n\n  const warning =\n    warningState !== null ? get(warningState, parsedPath) : undefined;\n\n  let error =\n    submitErrorState !== null ? get(submitErrorState, parsedPath) : undefined;\n\n  if ((error === undefined || error === null) && errorState !== null) {\n    error = get(errorState, parsedPath);\n  }\n\n  return (\n    <Wrapper\n      {...props}\n      initialValue={get(initialValueState, parsedPath)}\n      value={get(valueState, parsedPath)}\n      pendingValue={get(pendingValueState, parsedPath)}\n      warning={warning}\n      error={error}\n      focused={focusedPath === formattedPath}\n      touched={!!touchedMap[formattedPath]}\n      visited={!!visitedMap[formattedPath]}\n      submitting={submitting}\n      submitFailed={submitFailed}\n      submitSucceeded={submitSucceeded}\n      {...actions}\n    />\n  );\n};\n\nexport default renderWrapper;\n"],"file":"renderWrapper.js"}