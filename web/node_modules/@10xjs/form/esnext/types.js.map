{"version":3,"sources":["../src/types.js"],"names":["React"],"mappings":"AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB","sourcesContent":["// @flow strict\n\nimport * as React from 'react';\n\nimport type SubmitValidationError from './SubmitValidationError';\n\nexport type State = {[string]: mixed};\nexport type PathArray = Array<string | number>;\nexport type Path = PathArray | string;\n\nexport interface FormActions {\n  setValue(path: Path, value: mixed): void;\n  setInitialValue(path: Path, value: mixed): void;\n  setPendingValue(path: Path, value: mixed): void;\n  setTouched(path: Path, touched: boolean): void;\n  setVisited(path: Path, visited: boolean): void;\n  setFocused(path: Path, focused: boolean): void;\n  submit(event?: Event | SyntheticEvent<>): void;\n}\n\nexport type Context = {\n  initialValueState: State,\n  valueState: State,\n  pendingValueState: State,\n  errorState: State | null,\n  warningState: State | null,\n  submitErrorState: State | null,\n  focusedPath: string | null,\n  touchedMap: {[string]: boolean},\n  visitedMap: {[string]: boolean},\n  submitting: boolean,\n  submitFailed: boolean,\n  submitSucceeded: boolean,\n  actions: FormActions,\n};\n\nexport type DefaultStateProviderProps<SubmitResponse> = {\n  values: State,\n  onSubmit(values: State): Promise<SubmitResponse> | SubmitResponse,\n  onSubmitFail(error: Error): mixed,\n  onSubmitSuccess(response: SubmitResponse): mixed,\n  onSubmitValidationFail(error: SubmitValidationError): mixed,\n  warn(values: State): State | null,\n  validate(values: State): State | null,\n  children(context: Context): React.Node,\n};\n\nexport type StateProvider<StateProviderProps> = (\n  config: StateProviderProps,\n  (context: Context) => React.Node,\n) => React.Node;\n\ntype FormWrapperStateProps = {\n  submitting: boolean,\n  submitFailed: boolean,\n  submitSucceeded: boolean,\n  hasErrors: boolean,\n  hasSubmitErrors: boolean,\n  hasWarnings: boolean,\n};\n\nexport type FormRenderProps = FormWrapperStateProps & FormActions;\n\nexport type FormProps<StateProviderProps> = StateProviderProps & {\n  stateProvider: StateProvider<StateProviderProps>,\n  children(props: FormRenderProps): React.Node,\n};\n\nexport type FormWrapperProps = FormWrapperStateProps & {\n  actions: FormActions,\n  children(props: FormRenderProps): React.Node,\n};\n\nexport type InputProps = {\n  name: string,\n  value: mixed,\n  checked?: boolean,\n  onFocus(): void,\n  onBlur(): void,\n  onChange(fieldValueOrEvent: mixed): void,\n};\n\nexport type FieldRenderProps = {\n  input: InputProps,\n  composeInput: <\n    P: {\n      onFocus?: () => mixed,\n      onBlur?: () => mixed,\n      onChange?: () => mixed,\n    },\n  >(\n    P,\n  ) => $Rest<P, {|onFocus: *, onBlur: *, onChange: *|}> & InputProps,\n\n  // \"Meta\" Props\n  path: string,\n  hasError: boolean,\n  error: mixed,\n  hasWarning: boolean,\n  warning: mixed,\n  focused: boolean,\n  touched: boolean,\n  visited: boolean,\n  dirty: boolean,\n  pristine: boolean,\n  submitting: boolean,\n  submitFailed: boolean,\n  submitSucceeded: boolean,\n  rawValue: mixed,\n  pendingValue: mixed,\n  detached: boolean,\n\n  // Context Actions\n  setFocused(focused: boolean): void,\n  setVisited(visited: boolean): void,\n  setTouched(touched: boolean): void,\n  setValue(): void,\n  acceptPendingValue(): void,\n  rejectPendingValue(): void,\n  submit(): void,\n\n  // FieldArray Actions\n  addFieldBefore?: (rawValue: mixed) => void,\n  addFieldAfter?: (rawValue: mixed) => void,\n  removeField?: () => void,\n};\n\nexport type FieldArrayRenderProps = {\n  fields: Array<React.Node>,\n\n  // \"Meta\" Props\n  path: string,\n  hasErrors: boolean,\n  errors: Array<mixed>,\n  hasWarnings: boolean,\n  warnings: Array<mixed>,\n  submitting: boolean,\n  submitFailed: boolean,\n  submitSucceeded: boolean,\n  rawValues: Array<mixed>,\n  pendingValues: Array<mixed>,\n\n  // Context Actions\n  submit(): void,\n\n  // FieldArray Props\n  addField(value: mixed): void,\n};\n\nexport type FieldConfig = {\n  path: Path,\n  format(rawValue: mixed): mixed,\n  parse(rawValue: mixed, previousRawValue: mixed): mixed,\n  compare(value: mixed, otherValue: mixed): boolean,\n  checkbox: boolean,\n};\n\nexport type FieldStateProps = {\n  initialValue: mixed,\n  value: mixed,\n  pendingValue: mixed,\n  error: mixed,\n  warning: mixed,\n  focused: boolean,\n  touched: boolean,\n  visited: boolean,\n  submitting: boolean,\n  submitFailed: boolean,\n  submitSucceeded: boolean,\n};\n\nexport type FieldProps = {\n  key?: string,\n  index?: number,\n  addField?: (index: number, rawValue: mixed) => void,\n  removeField?: (index: number) => void,\n  children(props: FieldRenderProps): React.Node,\n} & FieldConfig;\n\nexport type FieldArrayProps = {\n  getFieldKey(stateValue: mixed, index: number): string,\n  renderField(props: FieldRenderProps): React.Node,\n  children(props: FieldArrayRenderProps): React.Node,\n} & FieldConfig;\n\nexport type FieldWrapperProps = FieldProps & FieldStateProps & FormActions;\n\nexport type FieldArrayWrapperProps = FieldArrayProps &\n  FieldStateProps &\n  FormActions;\n"],"file":"types.js"}